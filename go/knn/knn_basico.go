/*
K-Nearest Neighbors (KNN) - Implementa√ß√£o B√°sica em Go
======================================================

Algoritmo de classifica√ß√£o que determina a classe de um ponto baseado
na classe majorit√°ria dos K vizinhos mais pr√≥ximos.

Complexidade:
- Tempo: O(n * d) para cada predi√ß√£o
- Espa√ßo: O(n * d) para armazenar dados de treino

Caracter√≠sticas desta implementa√ß√£o:
- Foco na clareza e entendimento
- Coment√°rios extensos
- Estruturas simples
- Visualiza√ß√£o do processo
*/

package main

import (
	"fmt"
	"math"
	"sort"
	"strings"
)

// Ponto representa um ponto no espa√ßo n-dimensional
type Ponto struct {
	Coordenadas []float64 // Caracter√≠sticas do ponto
	Classe      string    // Classe/label do ponto
}

// String retorna representa√ß√£o textual do ponto
func (p Ponto) String() string {
	return fmt.Sprintf("Ponto{Coord: %v, Classe: %s}", p.Coordenadas, p.Classe)
}

// Vizinho representa um vizinho com sua dist√¢ncia
type Vizinho struct {
	Ponto     Ponto
	Distancia float64
}

// KNNBasico implementa o algoritmo K-Nearest Neighbors b√°sico
type KNNBasico struct {
	K           int     // N√∫mero de vizinhos a considerar
	DadosTreino []Ponto // Dados de treinamento
}

// NovoKNNBasico cria uma nova inst√¢ncia do classificador KNN
func NovoKNNBasico(k int) *KNNBasico {
	fmt.Printf("üéØ KNN B√°sico inicializado com k=%d\n", k)
	return &KNNBasico{
		K:           k,
		DadosTreino: make([]Ponto, 0),
	}
}

// CalcularDistanciaEuclidiana calcula a dist√¢ncia euclidiana entre dois pontos
func (knn *KNNBasico) CalcularDistanciaEuclidiana(p1, p2 []float64) (float64, error) {
	if len(p1) != len(p2) {
		return 0, fmt.Errorf("pontos devem ter a mesma dimens√£o")
	}

	fmt.Printf("   üìè Calculando dist√¢ncia euclidiana:\n")

	somaQuadrados := 0.0
	for i := 0; i < len(p1); i++ {
		diferenca := p1[i] - p2[i]
		quadrado := diferenca * diferenca
		somaQuadrados += quadrado
		fmt.Printf("      Dimens√£o %d: (%.3f - %.3f)¬≤ = %.3f\n",
			i+1, p1[i], p2[i], quadrado)
	}

	distancia := math.Sqrt(somaQuadrados)
	fmt.Printf("      Dist√¢ncia: ‚àö%.3f = %.3f\n", somaQuadrados, distancia)

	return distancia, nil
}

// Treinar armazena os dados de treinamento
func (knn *KNNBasico) Treinar(dados []Ponto) {
	knn.DadosTreino = make([]Ponto, len(dados))
	copy(knn.DadosTreino, dados)

	fmt.Printf("üìö Modelo treinado com %d exemplos\n", len(knn.DadosTreino))

	// Conta distribui√ß√£o das classes
	contadorClasses := make(map[string]int)
	for _, ponto := range dados {
		contadorClasses[ponto.Classe]++
	}

	fmt.Printf("üìä Distribui√ß√£o das classes: ")
	for classe, count := range contadorClasses {
		fmt.Printf("%s:%d ", classe, count)
	}
	fmt.Println()
}

// EncontrarKVizinhos encontra os k vizinhos mais pr√≥ximos de um ponto
func (knn *KNNBasico) EncontrarKVizinhos(pontoConsulta []float64) ([]Vizinho, error) {
	if len(knn.DadosTreino) == 0 {
		return nil, fmt.Errorf("modelo n√£o foi treinado")
	}

	fmt.Printf("\nüîç Buscando %d vizinhos mais pr√≥ximos para %v\n",
		knn.K, pontoConsulta)

	// Calcula dist√¢ncias para todos os pontos de treino
	var vizinhos []Vizinho

	for i, pontoTreino := range knn.DadosTreino {
		fmt.Printf("\nüìè Calculando dist√¢ncia para ponto %d: %v (classe: %s)\n",
			i+1, pontoTreino.Coordenadas, pontoTreino.Classe)

		distancia, err := knn.CalcularDistanciaEuclidiana(pontoConsulta, pontoTreino.Coordenadas)
		if err != nil {
			return nil, err
		}

		vizinhos = append(vizinhos, Vizinho{
			Ponto:     pontoTreino,
			Distancia: distancia,
		})
	}

	// Ordena vizinhos por dist√¢ncia (crescente)
	sort.Slice(vizinhos, func(i, j int) bool {
		return vizinhos[i].Distancia < vizinhos[j].Distancia
	})

	// Retorna apenas os k primeiros
	kVizinhos := vizinhos
	if len(vizinhos) > knn.K {
		kVizinhos = vizinhos[:knn.K]
	}

	fmt.Printf("\nüéØ %d vizinhos mais pr√≥ximos:\n", len(kVizinhos))
	for i, vizinho := range kVizinhos {
		fmt.Printf("   %d¬∫ vizinho: dist√¢ncia=%.3f, classe=%s\n",
			i+1, vizinho.Distancia, vizinho.Ponto.Classe)
	}

	return kVizinhos, nil
}

// Classificar classifica um ponto baseado nos k vizinhos mais pr√≥ximos
func (knn *KNNBasico) Classificar(pontoConsulta []float64) (string, error) {
	// Encontra os k vizinhos mais pr√≥ximos
	kVizinhos, err := knn.EncontrarKVizinhos(pontoConsulta)
	if err != nil {
		return "", err
	}

	// Conta a frequ√™ncia de cada classe
	contadorClasses := make(map[string]int)
	for _, vizinho := range kVizinhos {
		contadorClasses[vizinho.Ponto.Classe]++
	}

	fmt.Printf("\nüìä Contagem de classes nos vizinhos: ")
	for classe, count := range contadorClasses {
		fmt.Printf("%s:%d ", classe, count)
	}
	fmt.Println()

	// Encontra a classe mais frequente
	classePrevista := ""
	maxCount := 0

	for classe, count := range contadorClasses {
		if count > maxCount {
			maxCount = count
			classePrevista = classe
		}
	}

	confianca := float64(maxCount) / float64(len(kVizinhos))

	fmt.Printf("üéØ Classe prevista: %s\n", classePrevista)
	fmt.Printf("üî¢ Confian√ßa: %.1f%% (%d/%d vizinhos)\n",
		confianca*100, maxCount, len(kVizinhos))

	return classePrevista, nil
}

// demonstracaoKNNBasico executa uma demonstra√ß√£o completa do algoritmo
func demonstracaoKNNBasico() {
	fmt.Println("=" + strings.Repeat("=", 59))
	fmt.Println("ü§ñ DEMONSTRA√á√ÉO: K-Nearest Neighbors (KNN) - Vers√£o B√°sica")
	fmt.Println("=" + strings.Repeat("=", 59))

	// Cria dados de exemplo: classifica√ß√£o de frutas
	// [do√ßura, acidez] -> tipo_fruta
	dadosFrutas := []Ponto{
		{Coordenadas: []float64{8.0, 2.0}, Classe: "ma√ß√£"},
		{Coordenadas: []float64{7.5, 2.5}, Classe: "ma√ß√£"},
		{Coordenadas: []float64{8.2, 1.8}, Classe: "ma√ß√£"},
		{Coordenadas: []float64{3.0, 8.0}, Classe: "lim√£o"},
		{Coordenadas: []float64{3.5, 7.5}, Classe: "lim√£o"},
		{Coordenadas: []float64{2.8, 8.2}, Classe: "lim√£o"},
		{Coordenadas: []float64{9.0, 3.0}, Classe: "banana"},
		{Coordenadas: []float64{8.8, 3.5}, Classe: "banana"},
		{Coordenadas: []float64{9.2, 2.8}, Classe: "banana"},
	}

	fmt.Printf("üçé Dataset: Classifica√ß√£o de frutas com %d exemplos\n", len(dadosFrutas))
	fmt.Println("üìä Caracter√≠sticas: [do√ßura, acidez]")

	// Inicializa o classificador
	knn := NovoKNNBasico(3)

	// Treina o modelo
	knn.Treinar(dadosFrutas)

	// Testa com diferentes pontos
	pontosTeste := [][]float64{
		{7.8, 2.2}, // Deve ser ma√ß√£
		{3.2, 7.8}, // Deve ser lim√£o
		{9.1, 3.2}, // Deve ser banana
		{6.0, 5.0}, // Caso amb√≠guo
	}

	fmt.Println("\n" + strings.Repeat("=", 40))
	fmt.Println("üß™ TESTANDO CLASSIFICA√á√ïES")
	fmt.Println(strings.Repeat("=", 40))

	for i, ponto := range pontosTeste {
		fmt.Printf("\nüîç TESTE %d: Classificando ponto %v\n", i+1, ponto)
		fmt.Println(strings.Repeat("-", 40))

		classePrevista, err := knn.Classificar(ponto)
		if err != nil {
			fmt.Printf("‚ùå Erro: %v\n", err)
			continue
		}

		fmt.Printf("‚úÖ Resultado final: %v ‚Üí %s\n", ponto, classePrevista)
	}
}

// exemploComparacaoK demonstra como diferentes valores de k afetam o resultado
func exemploComparacaoK() {
	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üìà COMPARA√á√ÉO: Efeito de diferentes valores de K")
	fmt.Println(strings.Repeat("=", 60))

	// Dados simples para demonstra√ß√£o
	dados := []Ponto{
		{Coordenadas: []float64{1, 1}, Classe: "A"},
		{Coordenadas: []float64{1, 2}, Classe: "A"},
		{Coordenadas: []float64{2, 1}, Classe: "A"},
		{Coordenadas: []float64{5, 5}, Classe: "B"},
		{Coordenadas: []float64{5, 6}, Classe: "B"},
		{Coordenadas: []float64{6, 5}, Classe: "B"},
		{Coordenadas: []float64{3, 3}, Classe: "A"}, // Ponto intermedi√°rio
	}

	pontoTeste := []float64{3, 4}

	valoresK := []int{1, 3, 5}

	for _, k := range valoresK {
		fmt.Printf("\nüéØ Testando com k=%d\n", k)
		fmt.Println(strings.Repeat("-", 30))

		knn := NovoKNNBasico(k)
		knn.Treinar(dados)

		resultado, err := knn.Classificar(pontoTeste)
		if err != nil {
			fmt.Printf("‚ùå Erro: %v\n", err)
			continue
		}

		fmt.Printf("üìä Com k=%d: %v ‚Üí %s\n", k, pontoTeste, resultado)
	}
}

// exerciciosPraticos sugere exerc√≠cios para pr√°tica
func exerciciosPraticos() {
	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üéì EXERC√çCIOS SUGERIDOS:")
	fmt.Println(strings.Repeat("=", 60))
	fmt.Println("1. Implemente outras m√©tricas de dist√¢ncia (Manhattan, Minkowski)")
	fmt.Println("2. Adicione valida√ß√£o dos dados de entrada")
	fmt.Println("3. Implemente KNN para regress√£o (predizer valores num√©ricos)")
	fmt.Println("4. Adicione fun√ß√£o para encontrar o melhor k automaticamente")
	fmt.Println("5. Crie visualiza√ß√£o dos resultados (se usar biblioteca gr√°fica)")
	fmt.Println("6. Implemente normaliza√ß√£o autom√°tica dos dados")
	fmt.Println("7. Adicione suporte para pesos baseados na dist√¢ncia")
}

func main() {
	// Executa as demonstra√ß√µes
	demonstracaoKNNBasico()
	exemploComparacaoK()
	exerciciosPraticos()
}
