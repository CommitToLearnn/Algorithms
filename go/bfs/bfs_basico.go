/**
 * BFS B√°sico - Implementa√ß√£o Educacional para Grafos
 * ==================================================
 *
 * Esta implementa√ß√£o demonstra a busca em largura (BFS) aplicada a grafos simples.
 * Foco no entendimento do algoritmo com matriz de adjac√™ncia.
 *
 * Caracter√≠sticas:
 * - Implementa√ß√£o simples e did√°tica
 * - Uso de matriz de adjac√™ncia
 * - Coment√°rios explicativos detalhados
 * - Exemplos pr√°ticos de uso
 * - An√°lise de complexidade inclu√≠da
 *
 * Nota: Para executar sem conflitos, use: go run bfs_basico.go
 *
 * @author matheussricardoo
 * @version 1.0
 * @since Julho 2025
 */

package main

import (
	"fmt"
)

// Graph representa um grafo simples usando matriz de adjac√™ncia
// Adequado para grafos pequenos e densos
type Graph struct {
	vertices  int      // N√∫mero de v√©rtices
	adjMatrix [][]bool // Matriz de adjac√™ncia
}

// NewGraph cria um novo grafo com o n√∫mero especificado de v√©rtices
// Complexidade: O(V¬≤) onde V √© o n√∫mero de v√©rtices
func NewGraph(vertices int) *Graph {
	adjMatrix := make([][]bool, vertices)
	for i := range adjMatrix {
		adjMatrix[i] = make([]bool, vertices)
	}

	return &Graph{
		vertices:  vertices,
		adjMatrix: adjMatrix,
	}
}

// AddEdge adiciona uma aresta n√£o direcionada entre dois v√©rtices
// Complexidade: O(1)
func (g *Graph) AddEdge(src, dest int) {
	if src < 0 || src >= g.vertices || dest < 0 || dest >= g.vertices {
		fmt.Printf("‚ùå Erro: V√©rtices inv√°lidos (%d, %d)\n", src, dest)
		return
	}

	g.adjMatrix[src][dest] = true
	g.adjMatrix[dest][src] = true // Grafo n√£o direcionado
	fmt.Printf("‚úÖ Aresta adicionada: %d ‚Üî %d\n", src, dest)
}

// BFS executa busca em largura b√°sica a partir de um v√©rtice
// Algoritmo: explora v√©rtices n√≠vel por n√≠vel
// Complexidade de Tempo: O(V¬≤) devido √† matriz de adjac√™ncia
// Complexidade de Espa√ßo: O(V) para a fila e array de visitados
func (g *Graph) BFS(startVertex int) {
	if startVertex < 0 || startVertex >= g.vertices {
		fmt.Printf("‚ùå Erro: V√©rtice inicial inv√°lido (%d)\n", startVertex)
		return
	}

	// Array para marcar v√©rtices visitados
	visited := make([]bool, g.vertices)

	// Fila simples usando slice (FIFO)
	queue := []int{startVertex}
	visited[startVertex] = true

	fmt.Printf("üîç BFS a partir do v√©rtice %d: ", startVertex)

	for len(queue) > 0 {
		// Remove o primeiro elemento da fila (FIFO)
		current := queue[0]
		queue = queue[1:]

		fmt.Printf("%d ", current)

		// Visita todos os vizinhos n√£o visitados
		for neighbor := 0; neighbor < g.vertices; neighbor++ {
			if g.adjMatrix[current][neighbor] && !visited[neighbor] {
				visited[neighbor] = true
				queue = append(queue, neighbor)
			}
		}
	}

	fmt.Println()
}

// Display mostra a matriz de adjac√™ncia de forma leg√≠vel
func (g *Graph) Display() {
	fmt.Println("üìä Matriz de Adjac√™ncia:")
	fmt.Print("    ")
	for j := 0; j < g.vertices; j++ {
		fmt.Printf("%d ", j)
	}
	fmt.Println()

	for i := 0; i < g.vertices; i++ {
		fmt.Printf("%d   ", i)
		for j := 0; j < g.vertices; j++ {
			if g.adjMatrix[i][j] {
				fmt.Print("1 ")
			} else {
				fmt.Print("0 ")
			}
		}
		fmt.Println()
	}
	fmt.Println()
}

func main() {
	fmt.Println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
	fmt.Println("‚ïë          BFS B√°sico - Grafos           ‚ïë")
	fmt.Println("‚ïë      Implementa√ß√£o Educacional         ‚ïë")
	fmt.Println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
	fmt.Println()

	// Criar um grafo pequeno para demonstra√ß√£o
	fmt.Println("üìä Criando grafo de exemplo com 5 v√©rtices...")
	g := NewGraph(5)

	// Adicionar arestas para formar a estrutura:
	// 0 --- 1 --- 3
	// |     |
	// 2 --- 4
	fmt.Println("üîó Adicionando arestas:")
	g.AddEdge(0, 1)
	g.AddEdge(0, 2)
	g.AddEdge(1, 3)
	g.AddEdge(1, 4)
	g.AddEdge(2, 4)

	fmt.Println()

	// Mostrar estrutura do grafo
	g.Display()

	// Executar BFS a partir de diferentes v√©rtices
	fmt.Println("üöÄ Executando BFS:")
	g.BFS(0)
	g.BFS(2)

	fmt.Println()
	fmt.Println("üìã An√°lise de Complexidade:")
	fmt.Println("   ‚Ä¢ Tempo: O(V¬≤) - devido √† matriz de adjac√™ncia")
	fmt.Println("   ‚Ä¢ Espa√ßo: O(V) - para fila e array de visitados")
	fmt.Println()
	fmt.Println("üí° Casos de Uso:")
	fmt.Println("   ‚Ä¢ Busca de caminho mais curto (grafos n√£o ponderados)")
	fmt.Println("   ‚Ä¢ Verifica√ß√£o de conectividade")
	fmt.Println("   ‚Ä¢ An√°lise de componentes conectados")
	fmt.Println()
	fmt.Println("‚ö° Otimiza√ß√£o: Para grafos esparsos, use lista de adjac√™ncia")
}
